generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Token {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String
  browser    String
  ipAddress  String

  createdAt  DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + interval '30 days')"))
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  password      String? // Password is nullable for OAuth users
  tokens        Token[]
  googleId      String?  @unique
  name          String?
  username      String   @unique
  avatarUrl     String?
  bio           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role     @default(USER)

  reportsMade Report[]    @relation("ReporterUser")
  reportsUser Report[]    @relation("ReportedUser")
  events      Event[]     @relation("CreatorEvents")
  rsvps       RSVP[]
  messages    Message[]
  votes       EventVote[]
  moderator   Moderator?
}

model Moderator {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  assignedAt      DateTime @default(now())
  reviewedReports Report[] @relation("ReviewedReports")
}

enum EventStatus {
  ACTIVE
  CANCELED
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  dateTime    DateTime
  location    String
  lat         Float?
  lng         Float?
  capacity    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User   @relation("CreatorEvents", fields: [creatorId], references: [id])
  creatorId String

  categories Category[]

  reports Report[]

  score Int         @default(0)
  votes EventVote[]

  rsvps    RSVP[]
  messages Message[]

  status EventStatus @default(ACTIVE)

  @@index([lat, lng])
}

model RSVP {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique
  emoji String?

  events Event[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  OTHER
}

model Report {
  id        String       @id @default(cuid())
  reason    ReportReason
  details   String?
  createdAt DateTime     @default(now())

  // Reporter
  reporter   User   @relation("ReporterUser", fields: [reporterId], references: [id])
  reporterId String

  // Target: exactly one of these should be set, enforce at app/DB level
  reportedUser   User?   @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String?

  reportedEvent   Event?  @relation(fields: [reportedEventId], references: [id])
  reportedEventId String?

  // Moderation follow-up
  reviewedBy   Moderator? @relation("ReviewedReports", fields: [reviewedById], references: [id])
  reviewedById String?
  reviewedAt   DateTime?
  actionTaken  String? // e.g., "warned", "suspended", etc.
}

model EventVote {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  value     Int // +1 upvote, -1 downvote
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // no double voting
  @@index([eventId])
  @@index([userId])
}
